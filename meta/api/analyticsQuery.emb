<?HEAD
    Content-Type application/json
?>
<?em 
    const NodeURL = require('url');
    const QueryString = require('querystring');
    const uaParser = require('ua-parser-js');

    class CountMap extends Map {
        inc(key) {
            if(this.has(key)) this.set(key, this.get(key) + 1);
            else this.set(key, 1);
        }

        toJSON() {
            return Array.from(this);
        }
    }

    const queryData = QueryString.parse(NodeURL.parse(req.url).query || '');

    function getQuery(name, regex) {
        if(typeof queryData[name] == 'string' && (!regex || regex.test(queryData[name]))) return queryData[name];
    }

    const formatDate = _d => _d.getFullYear() + '-' + (_d.getMonth() + 1).toString().padStart(2, '0') + '-' + _d.getDate().toString().padStart(2, '0');
    
    const _from = getQuery('from', /\d{4,4}-\d{2,2}-\d{2,2}/) || '2021-07-17';
    const _to = getQuery('to', /\d{4,4}-\d{2,2}-\d{2,2}/) || formatDate(new Date(Date.now() + 86400000));
    const _location = getQuery('path') || 'All';
    const _domain = getQuery('domain') || 'All';

    const escape = [];
    if(_location != 'All') escape.push(_location);
    if(_domain != 'All') escape.push(_domain);

    const sql = global.server.sql('meta');
    const [__reg, __link] = await Promise.all([
        sql(
            'SELECT * FROM `analytics`' +
            'LEFT JOIN `analytics.event.pageview` ON `analytics`.`id` = `analytics.event.pageview`.`id`' +
            'LEFT JOIN `analytics.event.pageexit` ON `analytics`.`id` = `analytics.event.pageexit`.`id`' +
            'WHERE ' +
                '(`analytics`.`timestamp` BETWEEN "'+_from+' 00:00:00" AND "'+_to+' 23:59:59")' + 
                (_location != 'All' ? 'AND `location`=?' : '') +
                (_domain != 'All' ? 'AND `domain`=?' : '') +
            'ORDER BY `analytics`.`timestamp`' +
            'LIMIT 18446744073709551615;'
            , escape, {nestTables: true}),
        sql(
            'SELECT * FROM `analytics.event.link`' +
            'LEFT JOIN `analytics` ON `analytics.event.link`.`id` = `analytics`.`id`' +
            'WHERE ' +
                '(`analytics.event.link`.`timestamp` BETWEEN "'+_from+' 00:00:00" AND "'+_to+' 23:59:59;")' +
                (_location != 'All' ? 'AND `location`=?' : '') +
                (_domain != 'All' ? 'AND `domain`=?' : '') +
            'ORDER BY `analytics`.`timestamp`' +
            'LIMIT 18446744073709551615;'
            , escape, {nestTables: true})
    ]);

    const [rows] = __reg;
    const [linkrows] = __link;
    if(!rows.length) return $('{"days":[]}');

    const _d_earliest = new Date(rows[0].analytics.timestamp).setHours(0, 0, 0, 0);
    const _d_latest = new Date(rows[rows.length - 1].analytics.timestamp).setHours(0, 0, 0, 0);

    const dayArr = new Array(Math.ceil((_d_latest - _d_earliest) / 86400000) + 1);
    for(let i = 0; i < dayArr.length; ++i) {
        dayArr[i] = {
            visitors: 0,
            uniqueVisitors: new CountMap(),
            dntVisitors: 0,
            averageSessionLength: 0,

            browser: new CountMap(),
            engine: new CountMap(),
            os: new CountMap(),
            device: new CountMap(),
            cpu: new CountMap(),

            width: new CountMap(),
            
            path: new CountMap(),
            domain: new CountMap(),
            referer: new CountMap(),
            outbound: new CountMap()
        }
    }

    const normalizeHost = host => {
        host = host.replace(/^www./, '');
        if(host == 'caltrop.dev') return '';
        return host;
    }

    for(const row of rows) {
        const ua = uaParser(row.analytics.userAgent);
        
        const _day = new Date(row.analytics.timestamp).setHours(0, 0, 0, 0);
        const ind = ((_day - _d_earliest) / 86400000) | 0;
        const item = dayArr[ind];
        if(!item) log(ind, ' ', dayArr.length);
        item.visitors += 1;
        item.uniqueVisitors.inc(row.analytics.ip);

        item.browser.inc(ua.browser.name || 'Unknown');
        item.engine.inc(ua.engine.name || 'Unknown');
        item.os.inc(ua.os.name || 'Unknown');
        let device = ua.device.vendor || '';
        if(ua.device.model) device += ' ' + ua.device.model;
        item.device.inc(device.trim() || 'Unknown');
        item.cpu.inc(ua.cpu.architecture || 'Unknown');

        item.averageSessionLength += row.analytics.sessionLength;
        item.path.inc(row.analytics.location.replace(/\/index.(html|emb)$/, '/'));
        item.domain.inc(row.analytics.domain);
        if(row.analytics.referer) item.referer.inc(normalizeHost(NodeURL.parse(row.analytics.referer).host || 'Invalid') || 'caltrop.dev');
        else item.referer.inc('n/A');

        const width = row['analytics.event.pageview'].width;

        item.width.inc(width 
            ? width >= 256
                ? width >= 720
                    ? width >= 1080
                        ? width > 1440
                            ? 'Above 1440px'
                            : '1080px - 1440px'
                        : '720px - 1019px'
                    : '256px - 619px'
                : 'Below 256px'
            : 'Unknown'
        );
    }

    for(const row of linkrows) {
        const _day = new Date(row['analytics'].timestamp).setHours(0, 0, 0, 0)
        const ind = ((_day - _d_earliest) / 86400000) | 0;
        const item = dayArr[ind];
        const url = NodeURL.parse(row['analytics.event.link'].target);

        item.outbound.inc(normalizeHost(url.host) + url.path);
    }

    const data = {
        days: dayArr.map((n, i) => [i * 86400000 + _d_earliest, n])
    };

    for(let i = 0; i < data.days.length; ++i) {
        data.days[i][1].dntVisitors = data.days[i][1].uniqueVisitors.get('DNT') || 0;
        data.days[i][1].uniqueVisitors = [...data.days[i][1].uniqueVisitors.keys()].length;
        data.days[i][1].averageSessionLength /= data.days[i][1].visitors - data.days[i][1].dntVisitors;
        data.days[i][1].averageSessionLength = Math.round(data.days[i][1].averageSessionLength);
    }

    //if(!data.days[data.days.length - 1][1].visitors) data.days[data.days.length - 1].pop();

    $(JSON.stringify(data));
?>